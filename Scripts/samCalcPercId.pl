#!/usr/bin/perl -w
use strict;
use warnings;
use List::Util qw(sum);
use Getopt::Long;

sub Info
	{
	print "
#######################################################################
# Script to append percent identity (PID) in a SAM format alignment.
# Uses the MD tag and sequence information to calculate PID of a match
# 	and adds that to the SAM entry as a ZP tag. Skips record and
# 	provides warning if MD tag not found.
# Script can optionally subset the SAM based on a percent threshold.
# MD tag can be generated using samtools calmd function if not already
# 	generated by the aligner program.
# Needs a SAM input and will provide SAM with appended ZP tag.
#
# Author: piyuranjan\@gmail.com
#######################################################################
	\n";
	}
sub Usage
	{
	print "
Usage:\n$0 [options]
\nOptions:
 -i|isam	[string:required] Input SAM file (should have MD tag).
 -o|osam	[string:required] Output SAM file with ZP tag.
 -p|perc	[string:optional] Percent threshold. SAM >= -p will be
				exported in -o.
 -b|badsam	[string:optional] Bad SAM file. SAM < -p is exported here.
				This option makes -p necessary.
 -h|help	show help and exit 0.
	\n";
	}

my ($iSam,$oSam,$bSam,$perc,$help);
if(!GetOptions('i|isam=s' => \$iSam,
				'o|osam=s' => \$oSam,
				'p|perc=f' => \$perc,
				'b|badsam=s' => \$bSam,
				'h|help' => \$help))
	{Usage;exit 1;} #quit with error code
if($help) #quit with help
	{Info;Usage;exit 0;}
if((!defined $iSam)||(!defined $oSam)) #these options are necessary
	{Usage;exit 1;}
if((defined $bSam)&&(!defined $perc)) #perc is necessary if bSam is specified
	{Usage;exit 1;}

#die "Usage:\n$0 samIn samOut\n" if(!defined $ARGV[1]);

open(my $IN,$iSam) or die $!;
open(my $OUT,">",$oSam) or die $!;
my $BAD;
if(defined $bSam){open($BAD,">",$bSam) or die $!;}
my $zpTag=0;
my $mdTagWarn=0;
while(<$IN>)
	{
	if(/^@/) {print $OUT $_ ;print $BAD $_ if(defined $bSam); next;} #print headers to outFile/s directly
	##Calculating PID
	my $sam=$_;
	my $pid=0;
	($pid)=$sam =~ /\tZP\:f\:([\d|\.]+)[\t|\n]/; #extract PID from the ZP Tag if already there
	if($pid) #if ZP tag found (previously processed file), proceed to PID subsetting
		{$zpTag++;} #use this tag for warning
	else #if ZP tag is not found (new file), find MD tag and calculate PID
		{
		my ($mdTag)=$sam =~ /\tMD\:Z\:([\w|\^]+)[\t|\n]/; #extract the MD Tag
		if(! $mdTag) #if MD tag not found (not exported by aligner or no match), print SAM line in bad (if given) and skip.
			{
			$mdTagWarn++;
			print $BAD $sam if(defined $bSam);
			next;
			}
		else #if MD tag found in the SAM entry, calculate PID
			{
			my $seq=(split(/\t/,$sam))[9]; #get the sequence to calculate total length
			my $totLength=length($seq);
			my @matches=($mdTag=~/\d+/g); #find all numbers (total matches) from MD tag and sum all
			my $match=sum(@matches);
			$pid=($match/$totLength)*100; #calculate percent identity (PID)
			$pid=sprintf("%.2f",$pid); #round to 2 decimal places
			chomp($sam);
			$sam.="\tZP:f:$pid\n"; #modify SAM entry to append ZP tag with PID
			}
		}
	##Subetting files
	if(defined $perc) #if threshold given
		{
		if($pid>=$perc) #if calculated PID >= threshold print to output
			{print $OUT $sam;}
		else #print to bad if given
			{print $BAD $sam if(defined $bSam);}
		}
	else #if no threshold given
		{
		print $OUT $sam;
		}
	}
close($OUT);
close($BAD) if(defined $bSam);
close($IN);
warn "\nFound $zpTag entries with existing ZP tag.\nNothing done since no subsetting threshold was provided\n" if($zpTag&&(!defined $perc));
warn "\nWarning: No MD tag found in $mdTagWarn entries to calculate percent identity.\nPossibilities:\n1. File has sequences which did not align. These sequences will be written to -b or will be skipped.\n2. Aligner did not provide the MD tag. Please use samtools calmd function to get MD tags first.\n" if($mdTagWarn);

